# -*- coding: utf-8 -*-
"""Assignment4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cEhMvl_HINq5WoxAbtDEod1_rvXKE7oF
"""



"""# **List Methods**"""



"""1. Create and Modify Lists

o Create a list called fruits with the items: "apple", "banana", "orange"

o Add "grape" to the end of the list using an appropriate method

o Insert "mango" at position 2 in the list

o Remove "banana" from the list

o Print the final list
"""

fruits =["apple", "banana", "orange"]
fruits.append("grape")
fruits.insert(2,"mango")
fruits.remove("banana")
print(fruits)

"""2. List Operations

o Create a list numbers with values: 10, 20, 30, 40, 50

o Create a second list more_numbers with values: 60, 70, 80

o Combine both lists into a new list called all_numbers

o Make a copy of all_numbers called numbers_copy

o Reverse the order of numbers_copy

o Print both all_numbers and numbers_copy
"""

numbers: list = [10, 20, 30, 40, 50]
more_values = [60, 70, 80]
all_numbers = numbers + more_values
numbers_copy = all_numbers.copy()
numbers_copy.reverse()
print(all_numbers)
print(numbers_copy)

"""3. Sorting and Counting

o  Create a list scores with these values: 85, 92, 78, 65, 92, 85, 74

o Sort the list in ascending order

o Sort the list in descending order

o Count how many times 92 appears in the list

o Find and print the highest and lowest scores

o Print the sorted list





"""

scores =[85, 92, 78, 65, 92, 85, 74]
scores.sort()              # Ascending
print(scores)
scores.sort(reverse=True)  # Desending
print(scores)
count = scores.count(92)
highest = max(scores)
lowest = min(scores)

print(count)
print(highest)
print(lowest)

"""4. List Manipulation
o Create a list letters with values: "a", "b", "c", "d", "e"

o Use slicing to create a new list with only the first three letters

o Use slicing to create another list with only the last two letters

o Find and print the index of "c" in the list

o Replace "d" with "z" in the original list

o Print the modified list
"""

letters =["a", "b", "c", "d", "e"]
first_list=letters[0:3]
second_list = letters[3:]
index = letters.index("c")
letters[3] = "z"

print(letters)

"""# **Dictionary Methods Practice**

1. Create and Access Dictionaries

o Create a dictionary called student with these key-value pairs:

 "name": "John"
 "age": 20
 "grade": "A"

 "courses": ["Math", "Science", "History"]

o Print the student's name

o Print the list of courses

o Add a new key-value pair: "email": "john@example.com"
"""

student: dict ={
    "name" : "John",
    "age" : 20,
    "grade" : "A",
    "courses" : ["Math", "Science", "History"]
}
print(student["name"])
print(student["courses"])
student["email"] = "john@example.com"
print(student)

"""2. Modify Dictionary Values

o Change the student's age to 21

o Add a new course "Computer Science" to the courses list

o Update the grade to "A+"

o Print the modified dictionary

"""

student.update({"age":21})
student["courses"].append("Computer Science")
student.update({"grade" : "A+"})
print(student)

"""3. Dictionary Operations

o Create a second dictionary student_address with these key-value pairs:

 "street": "123 College Ave"
 "city": "New York"
 "zip": "10001"

o Combine both dictionaries into a new dictionary called student_info

o Remove the "zip" key from student_info

o Check if "phone" exists in the dictionary

o Print the final dictionary
"""

student_address : dict= {
    "street" : "123 College Ave",
    "city" : "New York",
    "zip" : "10001"
}
student_info = {**student, **student_address}
student_info.pop("zip")
print("phone" in student_info)
print(student_info)

"""4. Dictionary Methods

o Create a dictionary word_count with these key-value pairs:

 "hello": 5  
 "world": 10  
 "python": 15  

o Get all keys and print them as a list

o Get all values and print them as a list

o Get all key-value pairs and print them

o Make a copy of the dictionary

o Clear the original dictionary

o Print both dictionaries to verify one is empty and one is a copy
"""

word_count : dict ={
    "hello" : 5,
    "world" : 10,
    "python" : 15
}
print(list(word_count.keys()))
print(list(word_count.values()))
print(list(word_count.items()))
word_copy =word_count.copy()
word_count.clear()
print(word_count)
print(word_copy)

"""# **Shopping Discount Calculator**

**Instructions
Create a Python program that calculates the final price after applicable discounts. Do
not use any functions - just use variables and if statements.**

Tasks

1. Set up the initial variables:

o purchase_amount: The total cost of items in the shopping cart

o is_loyalty_member: Boolean (True/False) indicating if the customer is a
loyalty member

o day_of_week: A string with the current day (e.g., "Monday", "Tuesday", etc.)

o is_holiday_season: Boolean indicating if it's currently a holiday shopping
season


2. Apply discount rules using if statements:

o If purchase amount is greater than $100, apply a 10% discount

o If purchase amount is greater than $50 (but  less  than
 or  equal  to  $100),
apply a 5% discount

o If the customer is a loyalty member, apply an additional 5% discount

o If it's a weekend (Saturday or Sunday), apply an additional 2% discount

o If it's a holiday season, apply an additional 8% discount


3. Calculate and display:

o The original purchase amount

o Each discount that was applied and its amount

o The final price after all discounts
"""

purchase_amount: float = 150.00
is_loyalty_member : bool = True
day_of_week : str = "Saturday"
is_holiday_season : bool = True
discount = 0.0

# Apply discount rules using if statements
if purchase_amount > 100 :
  discount += 0.1       # Add 10% discount

elif purchase_amount > 50 and purchase_amount <= 100 :
    discount += 0.05    # Add 5% discount

    if is_loyalty_member :
        discount += 0.05    # Add loyalty member discount

    if day_of_week == "Saturday" or day_of_week == "Sunday" :
        discount += 0.02

        if is_holiday_season :
            discount += 0.08

final_price = purchase_amount * (1 - discount)

print(f"Original purchase amount: ${purchase_amount:.2f}")
print(f"Total discount applied: {discount*100:.2f}%") # Print total discount percentage
print(f"Final price: ${final_price:.2f}")

"""# **For Loop Assignment - Number Patterns**

Write a Python program that generates the following patterns using for loops:

1. Pattern 1: Counting Numbers

o Print numbers from 1 to 10 on a single line.
"""

for i in range(1,11):
  print(i)

"""Pattern 2: Multiplication Table

 Create a multiplication table for the number 5 (from 1 to 10)
"""

for i in range(1,11) :
  print(f"5 *  {i} = {5*i}")

"""# **While Loop Assignment - Interactive Game**

Create a simple number guessing game using a while loop.

Instructions:

Write a Python program that:

1. Sets a "secret number" (you can choose any number between 1 and 50)

2. Asks the player to guess the number

3. Tells the player if their guess is too high or too low

4. Keeps asking until the player guesses correctly

5. Keeps track of how many guesses it took
"""

secret_number : int = 29
guess_number = int(input("Guess a number between 1 to 50  "))

while(guess_number != secret_number):
  print("Guess is wrong")

  if(guess_number < secret_number):
    print("Guess is too low")
    guess_number = int(input("Guess a number between 1 to 50  "))

    if(guess_number > secret_number):
      print("Guess is too high")
      guess_number = int(input("Guess a number between 1 to 50  "))

print("Guess is correct")

"""# **Student Grade Management System**

In this assignment, you will create a simple student grade management system using
Python lists and dictionaries. This will help you understand how these data structures
work together to organize and manage information

Create a Python program that does the following:

1. Create a list to store information about students



2. Each student should be represented as a dictionary with the following keys:

o name: The student's full name

o id: A unique student ID number

o grades: Another dictionary containing course names as keys and grades as
values



3. Your program should:


o Add at least 3 students to the list

o Add grades for at least 3 courses for each student

o Display all students with their grades

o Calculate and display the average grade for each student

o Find and display the student with the highest average grade

o List all students with an average grade above 80

o Calculate and display the average grade for a specific course

o Add a new student to the system
"""

students : list = []
student1 : dict = {
    "fullname" : "Ali Haider",
    "id" : "001",
   "grades" : {
       "course": "Graphic Design",
       "grade": 90
   }
}
student2 : dict = {
    "fullname" : "Farhan Iqbal",
    "id" : "002",
   "grades" : {
       "course": "Web Development",
       "grade": 80
   }
}
student3 : dict = {
    "fullname" : "Khalid Ali",
    "id" : "003",
   "grades" : {
       "course": "Digital Marketing",
       "grade": 70
   }
}

students.append(student1)
students.append(student2)
students.append(student3)

for student in students:
  print(student)


 ##Add at least 3 courses for each student
students[0]["grades"].update({"course2": "Data Science", "grade2": 85})
students[0]["grades"].update({"course3": "Machine Learning", "grade3": 92})

students[1]["grades"].update({"course2": "Mobile Development", "grade2": 75})
students[1]["grades"].update({"course3": "UI/UX Design", "grade3": 88})

students[2]["grades"].update({"course2": "SEO", "grade2": 68})
students[2]["grades"].update({"course3": "Content Marketing", "grade3": 72})


# Add a new student to the system
new_student = {
    "fullname": "Sarah Meer",
    "id": "004",
    "grades": {
        "course": "Graphic Design",
        "grade": 95,
        "course2": "Web Development",
        "grade2": 82,
        "course3": "Digital Marketing",
        "grade3": 88,
    }
}
students.append(new_student)
print(students)